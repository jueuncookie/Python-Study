# -*- coding: utf-8 -*-
"""포트폴리오_타이타닉_데이터_분석_및_시각화.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lrEdavRM1tQE6E8yLO0yQodf7AGrNP5s

**타이타닉 데이터 분석 및 시각화**
"""



import numpy as np #기본적인 수치계산
import pandas as pd
import seaborn as sns #seaborn은 시각화툴.
#Seaborn은 Matplotlib을 기반으로 다양한 색상 테마와 통계용 차트 등의 기능을 추가한 시각화 패키지
#타이타닉 데이터 내장

titanic = sns.load_dataset('titanic')
#titanic데이터가 컴퓨터 안에 들어옴.
#titanic 변수로 데이터를 받음.

"""정보 탐색"""

titanic.head() #데이터를 간단히 확인(+ head()는 숫자가 없으면 5개까지 가져옴. )

"""*  Survival : 생존여부(0: 사망, 1: 생존)
*  Pclass : 등실의 등급(1: 1등급, 2: 2등급, 3: 3등급)
*  Sex : 성별
*  Age : 나이
*  Sibsp : 함께 탑승한 형제자매, 아내 남편의 수
*  Parch: 함께 탑승한 부모, 자식의 수
*  Fare: 티켓의 요금
*  Embarked: 배에 탑승한 위치(C = Cherbourg, Q = Queenstown, S = Southampton)
"""

titanic.tail() #전체 데이터 개수를 확인하기 위해 tail 메소드를 이용함. 총 891개임을 확인함.

titanic.describe()
#describe 메소드를 통해 수치형 데이터들의 통계치를 한눈에 보게 해줌.

"""- 숫자형 (int, float) column들의 기술 통계량을 보여주는 함수

- 기술통계량이란?
 - 해당 column을 대표할 수 있는 통계값들을 의미
 
 
- 기술통계량 종류
 - count: 해당 column에서 비어 있지 않은 값의 개수
 - mean: 평균
 - std: 표준편차
 - min: 최솟값 (이상치 포함)
 - 25% (Q1): 전체 데이터를 순서대로 정렬했을 때, 아래에서 부터 1/4번째 지점에 있는 값
 - 50% (Q2): 중앙값 (전체 데이터를 순서대로 정렬했을 때, 아래에서 부터 2/4번째 지점에 있는 값)
 - 75% (Q3): 전체 데이터를 순서대로 정렬했을 때, 아래에서 부터 3/4번째 지점에 있는 값
 - max: 최댓값 (이상치 포함) 
"""

titanic.dropna().describe()
#dropna 메소드를 통해 이상치값 즉 비어있는 값이 있으면 그 이상치값은 빼고, 수치형 데이터들의 통계치를 표시하고 있다

a = 1
b = 0
c = 2
d = 100

avg = (a+b+c+d)/4
#avg = (a+b+c+d)/3
avg

#0인 b값을 포함하여 평균구하기.

a = 1
b = 0
c = 2
d = 100

#avg = (a+b+c+d)/4
avg = (a+b+c+d)/3
avg

#0인 b값을 제외하고 평균을 구하면 값이 달라진다.

titanic.var() #variance 기댓값보다 얼마큼 퍼져있는지 검토

titanic.mad() #mad 메소드는 전체 성분의 평균값에서부터 얼마만큼 분포가 떨어져있느냐를 보여줌.(절대 편차를 구해서 계산하는 것)

"""· count 전체 성분의 (NaN이 아닌) 값의 갯수를 계산 

· min, max 전체 성분의 최솟, 최댓값을 계산 

· argmin, argmax 전체 성분의 최솟값, 최댓값이 위치한 (정수)인덱스를 반환 

· idxmin, idxmax 전체 인덱스 중 최솟값, 최댓값을 반환 

· quantile 전체 성분의 특정 사분위수에 해당하는 값을 반환 (0~1 사이) 

· sum 전체 성분의 합을 계산 

· mean 전체 성분의 평균을 계산 

· median 전체 성분의 중간값을 반환 

· mad 전체 성분의 평균값으로부터의 절대 편차(absolute deviation)의 평균을 계산 

· std, var 전체 성분의 표준편차, 분산을 계산 

· cumsum 맨 첫 번째 성분부터 각 성분까지의 누적합을 계산 (0에서부터 계속 더해짐) 

· cumprod 맨 첫번째 성분부터 각 성분까지의 누적곱을 계산 (1에서부터 계속 곱해짐)

※ NaN 값을 배제하지 않고 계산하려면 아래와 같이 skipna에 대해 false를 지정. df.sum(axis=1, skipna=False)

1) 168, 169, 170, 171, 172

2) 130, 150, 170, 190, 210
"""

titanic.groupby('class').count() #groupby 메소드를 통해 class별 통계값을 구해줌.

""" - 집단에 대한 통계량 확인 
 
<img src="https://s3.amazonaws.com/files.dezyre.com/images/Tutorials/Split+Apply+Combine+Strategy.png" width="700" height="500">
"""

sns.countplot(y='class', data=titanic) #countplot은 class별로 데이터를 시각화해주고 있다.

sns.countplot(y='class', data=titanic); # ; 을 붙여서 matplotlib에 대한 설명이 빠지고 그래프만 남겼다.

sns.countplot(y='sex', data=titanic);#성별에 따라 데이터를 시각화해주기

sns.countplot(y='alive', data=titanic); # alive의 여부, 즉 살았느냐 죽었느냐에 따라 데이터를 시각화해주고 있다.

sns.countplot(y='alone', data=titanic);
# alone의 여부, 즉 혼자 탔느냐 혼자 타지 않았느냐에 따라 데이터를 시각화해주고 있다.

titanic.groupby('class').std()  #class별로 표준편차 구하고 있다 .

titanic.groupby('class')['fare'].median() #class별로 요금의 정중앙값을 구하고 있다.

titanic.query("alive == 'yes'").groupby('class').count() #생존한 사람들로만 class별 통계값을 보여준다.
# query는 저장되어 있는 정보를 필터하기 위한 질문.


#titanic.groupby('class').count() 는 생존 여부와 상관없이 전체.

titanic.groupby('class')['age'].describe() 
# class별 나이에 대한 데이터들의 통계치 나타내기.

titanic.query("alive == 'yes'").groupby('class').describe()
#생존한 사람들을 class별로 나누고, 각각의 데이터들의 통계치를 보여준다.

titanic.query("age > 30").groupby('class').median()
#30살 이상인 사람들을 class별로 나누고, 전체 성분의 중간값을 보여준다. 
#cf. 평균 vs 중간값 : 평균은 데이터 세트의 평균 값이며, 중간값은 데이터 세트의 중앙 숫자 값.

titanic.groupby(['class','sex'])['age'].mean().unstack()
#class별 성별로 나누고 나이의 평균값만 보여준다.

titanic.groupby(['class','sex'])['age'].mean()

"""- 판다스 데이터프레임 메소드
- 데이터 재구성 
   - stack: 변수 값을 열 이름으로 정돈
   - unstack: 여러 변수 그룹을 동시에 열 이름으로 정돈
   - pivot: stack으로 정돈된 데이터 뒤집기 
"""

sns.catplot(x='sex', y='age', hue='class', kind='bar', data=titanic);  #catplot : 카테고리별 그래프 그리기
#hue 인수에 카테고리 값을 가지는 변수의 이름을 지정하면 카테고리 값에 따라 다르게 시각화
#bar 그래프를 통해 성별 나이 데이터를 class에 따라 다르게 시각화함.

sns.catplot(x='who', y='age', hue='class', kind='bar', data=titanic);
#bar 그래프를 통해 who별 나이 데이터를 class에 따라 다르게 시각화함.
#who(성인남자, 성인여자, 아이)

titanic.groupby(['class','sex'])['fare'].mean().unstack()
#클래스별 성별로 나눠서 요금의 평균값을 보여준다.

titanic.groupby(['class','who'])['fare'].mean().unstack()
#클래스별 who(성인남자, 성인여자, 아이)별로 나눠서 요금의 평균값을 보여준다.

sns.catplot(x='sex', y='fare', hue='class', kind='bar', data=titanic);
#bar 그래프를 통해 성별 요금 데이터를 class에 따라 다르게 시각화함.

sns.catplot(x='who', y='fare', hue='class', kind='bar', data=titanic);
#bar 그래프를 통해 who(성인남자, 성인여자, 아이)별 요금 데이터를 class에 따라 다르게 시각화함.

titanic.groupby(['class','sex'])['survived'].mean().unstack()
#클래스별 성별 생존여부의 평균값을 나타내기.

titanic.pivot_table('survived', index='class', columns='sex')
#클래스별, 성별로 생존여부 데이터를 재구성하여 나타내기.

titanic.pivot_table('survived', index='class', columns='who')
#클래스별 who(성인남자, 성인여자, 아이)별로 생존여부 데이터를 재구성해서  표로 나타낸다.

sns.catplot(x='class', y='survived', hue='sex', kind='bar', data=titanic);
# bar 그래프로 class별 생존여부 데이터를 성별에 따라 다르게 시각화하기.

sns.catplot(x='class', y='survived', hue='who', kind='bar', data=titanic);
#클래스 별 생존여부 데이터를 who(성인남자, 성인여자, 아이)에 따라  bar 그래프로 시각화하기.

sns.catplot(x='class', y='survived', col='who', kind='bar', data=titanic);
#who가 성인 남자일 때, 성인 여자일 때, 아이일 때로 각각 나누어, 클래스별 생존여부 데이터를 총 3개의 bar 그래프로 시각화했다.

titanic.pivot_table('survived', index='who', columns= 'class')
#who별 클래스별로 생존여부 데이터를 재구성하여 표로 보여준다.

titanic.pivot_table('survived', index='who', columns= 'class', margins=True)
#who 별 class별로 생존여부 데이터를 재구성하여 표로 보여주기. 이때 margins에 True를 놓아서 전체 합계의 평균값 데이터도 볼 수 있다.

titanic.pivot_table('survived', index='deck', columns= 'class', margins=True)
#deck 별 class별로 생존여부 데이터를 재구성하여 표로 보여주기. 이때 margins에 True를 놓아서 전체 합계의 평균값 데이터도 볼 수 있다.
#deck는 클래스별 위치를 뜻한다.

titanic.pivot_table('survived', index='deck', columns= 'class')
#deck 별 class별로 생존여부 데이터를 재구성하여 표로 보여주기

sns.countplot(y='deck', data=titanic);
#deck별로 데이터를 시각화해주고 있다.

sns.countplot(y='deck', hue='class', data=titanic);
#deck(클래스별 위치)별로 class에 따라 데이터를 시각화하고 있다.

sns.catplot(x='survived', y='deck', hue='class', kind='bar', data=titanic);
#bar 그래프를 통해 deck별로 생존여부 데이터를  class에 따라  나타내기.

sns.catplot(x='alone', y='survived', kind='bar', data=titanic);
#alone여부에 따라 생존여부 데이터를 bar 그래프를 통해 나타내기.

"""**실습 후 타이타닉 데이터에 종합 의견과 실습 소감**


처음 강의를 들으면서 따라할 때는 이해가 잘 안되었지만, 두번 세번 반복해서 듣다보니 코드들이 눈에 익혀서 점점 이해가 되기 시작했다.

특별히 실습 과정에서 이해가 안 갔던 부분은 dropna 메소드를 통해 이상치값 즉 비어있는 값이 있으면 그 이상치값은 빼고, 수치형 데이터들의 통계치를 표시하고 있던 부분이다. 처음 말로 들었을 때는 이해가 안 갔지만 예시('avg = (a+b+c+d)/4 avg = (a+b+c+d)/3' , '0인 b값을 제외하고 평균을 구하면 값이 달라진다.' )를 통해 이해할 수 있었다.

생존에 대한 타이타닉 데이터를 다루는 이 활동을 통해 데이터를 시각화하고 분석하는 방법들을 제대로 배울 수 있었던 것 같다. 빨리 타이타닉 데이터가 아닌 다른 데이터를 가지고 배운 내용을 응용해보고 싶다.
"""